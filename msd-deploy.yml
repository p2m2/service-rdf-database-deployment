# service-rdf-database-deployment/.gitlab-ci.yml
# user can extends the .deploy_msd and define the 'script' tag
#
# cat my_private_key | base64 -w0 => set SSH_PRIVATE_KEY as a CI/CD variable
#
.deploy_msd:
  stage: deploy
  variables:
    DATABASE: ''
    CATEGORY: ''
    RDF_INPUT_FILES: ''
    RDF_ASKOMICS_INPUT_FILES: ''
    OUTPUT_SCRIPT_FILE: 'deploy.sh'
    SSH_HOST_WORK_DIR: '/tmp/CI/'

  image: inraep2m2/service-rdf-database-deployment:1.0.3

  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_ENVIRONMENT_SLUG.example.com
    on_stop: stop_review

  before_script:
    - |
      echo "==================================";
      echo "[info] Test the existence of the variables necessary";
      [ -z "$DATABASE" ] && echo "DATABASE is Empty" && exit 1
      [ -z "$CATEGORY" ] && echo "CATEGORY is Empty" && exit 1
      [ -z "$RDF_INPUT_FILES" ] &&\
       echo "RDF_INPUT_FILES is Empty" && exit 1
      [ -z "$OUTPUT_SCRIPT_FILE" ] &&\
       echo "OUTPUT_SCRIPT_FILE is Empty" && exit 1
      [ -z "$SSH_OPTS" ] && echo "SSH_OPTS is Empty" && exit 1
      [ -z "$SSH_USER" ] && echo "SSH_USER is Empty" && exit 1
      [ -z "$SSH_HOST" ] && echo "SSH_HOST is Empty" && exit 1
      [ -z "$SSH_HOST_WORK_DIR" ] && echo "SSH_HOST_WORK_DIR is Empty" && exit 1
      [ -z "$SSH_PRIVATE_KEY" ] && echo "SSH_PRIVATE_KEY is Empty" && exit 1
      echo $(date '+%Y-%m-%dT%T') > ~/.start_date.txt

  after_script:
    - echo "==================================";
    - echo "[info] init SSH key";
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
# cat my_private_key | base64 -w0 => set SSH_PRIVATE_KEY as a CI/CD variable
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
    - export START_DATETIME_XSD=$(cat ~/.start_date.txt)
    - |
      echo "##########"
      echo "###    'Metadata / Push on HDFS' script Generation"
      echo "##########"
      echo "Start Date:${START_DATETIME_XSD}"

      if [ -z "$RDF_ASKOMICS_INPUT_FILES" ];then
         service-rdf-database-deployment --soft ${CI_PROJECT_NAME} \
                           --start-date ${START_DATETIME_XSD} \
                           --category ${CATEGORY}  \
                           --release ${CI_COMMIT_BRANCH}  \
                           --database ${DATABASE}  \
                           --output ${OUTPUT_SCRIPT_FILE} \
                           ${RDF_INPUT_FILES}
      else
         service-rdf-database-deployment --soft ${CI_PROJECT_NAME} \
                  --start-date ${START_DATETIME_XSD} \
                  --category ${CATEGORY}  \
                  --release ${CI_COMMIT_BRANCH}  \
                  --database ${DATABASE}  \
                  --askomics-abstraction ${RDF_ASKOMICS_INPUT_FILES} \
                  --output ${OUTPUT_SCRIPT_FILE} \
                  ${RDF_INPUT_FILES}
      fi

      echo "##########"
      echo "###    Copy script => ${SSH_HOST_WORK_DIR}/${CI_JOB_ID} "
      echo "##########"
      ssh $SSH_OPTS $SSH_USER@$SSH_HOST\
       "mkdir -p ${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/"
      
      scp -r ${RDF_INPUT_FILES} \
       $SSH_USER@$SSH_HOST:${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/

      [ -f "$RDF_ASKOMICS_INPUT_FILES" ] && \
        scp -r ${RDF_ASKOMICS_INPUT_FILES} \
       $SSH_USER@$SSH_HOST:${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/

      scp ${OUTPUT_SCRIPT_FILE} \
       $SSH_USER@$SSH_HOST:${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/

      echo "##########"
      echo "###    HDFS Deployment (Data + Metadata)"
      echo "##########"
      ssh $SSH_OPTS $SSH_USER@$SSH_HOST \
       "cd ${SSH_HOST_WORK_DIR}/${CI_JOB_ID};bash ${OUTPUT_SCRIPT_FILE}"

      echo "##########"
      echo "###    Clean"
      echo "##########"
      ssh $SSH_OPTS $SSH_USER@$SSH_HOST \
       "rm -rf ${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/"


stop_review:
  stage: deploy
  script:
    - echo "Remove review app"
    - cat $OUTPUT_SCRIPT_FILE
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop