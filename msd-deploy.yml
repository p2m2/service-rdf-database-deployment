# service-rdf-database-deployment/.gitlab-ci.yml
# user can extends the .deploy_msd and define the 'script' tag
#
# cat my_private_key | base64 -w0 => set SSH_PRIVATE_KEY as a CI/CD variable
#

stages:
  - version
  - deploy

variables:
  CACHE_FALLBACK_KEY: fallback-key

################################################################################
# cache
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .ssh/

.common_deploy:
  variables:
    OUTPUT_SCRIPT_FILE: 'deploy.sh'
    SSH_HOST_WORK_DIR: '/uploads/CI/'
    TXT_RED: "\e[31m"
    TXT_CLEAR: "\e[0m"
    TXT_YELLOW: "\e[33m"

  image: inraep2m2/service-rdf-database-deployment:remove_check_abstraction_asko_35
  tags: [docker]
  before_script:
    - '[ -z "$SSH_OPTS" ] && echo "SSH_OPTS is Empty" && exit 1'
    - '[ -z "$SSH_USER" ] && echo "SSH_USER is Empty" && exit 1'
    - '[ -z "$SSH_HOST" ] && echo "SSH_HOST is Empty" && exit 1'
    - '[ -z "$SSH_HOST_WORK_DIR" ] && echo "SSH_HOST_WORK_DIR is Empty" && exit 1'
    - '[ -z "$SSH_PRIVATE_KEY" ] && echo "SSH_PRIVATE_KEY is Empty" && exit 1'
    - echo "==================================";
    - echo "[info] init SSH key";
    - mkdir -p ~/.ssh
    - export START_DATETIME_XSD=$(echo $(date '+%Y-%m-%dT%T'))
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-add <(echo "$SSH_PRIVATE_KEY" | base64 -d)
    # Get VERSION value
    - '[ -z "$VERSION" ] && echo -e "${TXT_RED}VERSION Empty value" && exit 1'
    - '[ -z "$DATABASE" ] && echo -e "${TXT_RED}DATABASE is Empty" && exit 1'
    - '[ -z "$CATEGORY" ] && echo -e "${TXT_RED}CATEGORY is Empty" && exit 1'
    - '[ -z "$RDF_INPUT_FILES" ] && echo -e "${TXT_RED}RDF_INPUT_FILES is Empty" && exit 1'
    - '[ -n "$RDF_ASKOMICS_INPUT_FILES" ] && echo -e "${TXT_RED}RDF_ASKOMICS_INPUT_FILES is defined. 1.0.7 Defined use RDF_ASKOMICS_INPUT_FILE" && exit 1'
    - '[ -z "$OUTPUT_SCRIPT_FILE" ] && echo -e "${TXT_RED}OUTPUT_SCRIPT_FILE is Empty" && exit 1'
    - '[ -z "$SSH_HOST_WORK_DIR" ] && echo -e "${TXT_RED}SSH_HOST_WORK_DIR is Empty" && exit 1'
    - 'export PROV_FILE_NAME=$CATEGORY-$DATABASE-$VERSION.jsonld'

  dependencies: [fetch_info_database]

check_version_create_tag:
  stage: deploy
  extends: .common_deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    # user should create a tag release to build/create a new release generation
    # if a Tag is defined, a tag name release is created.
    - 'echo -e "${TXT_YELLOW}VERSION : $VERSION"'
    # If TAG release context => Build the database on MSD
    # othewise => manage a creation of a TAG releas
    #           - Check if TAG exist with API
    #          if exist (variable is not empty) => nothing to do because the tag exist !
    #            otherwise :
    #            - a tag is create to run a new pipeline
    #
    - |
      if [ -z "$CI_COMMIT_TAG" ]; then
        echo " -- Check with API -- "

        RES_CURL_VERSION=$(curl -s --header "PRIVATE-TOKEN: ${PRIVATE_TOKEN}"\
          "${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/repository/tags" |\
            jq ".[].name" | grep $VERSION 2>/dev/null || true)

        if [ -n "$RES_CURL_VERSION" ]; then
          echo -e "${TXT_YELLOW}Release $VERSION exist."
        else
          echo -e "${TXT_YELLOW} ==== new version : $VERSION ";
          curl -s --request POST \
             --header "PRIVATE-TOKEN: ${PRIVATE_TOKEN}"\
               "${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name=${VERSION}&ref=${CI_DEFAULT_BRANCH}"
         fi
      fi

deployment_release:
  stage: deploy
  extends: .common_deploy
  except:
    - branches
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_ENVIRONMENT_SLUG.gitlab_pfem.fr
    on_stop: stop_review

  script:
    # Build is avalable only for TAG creation (means => $CI_COMMIT_REF_NAME is not empty)
    - RELEASE=$CI_COMMIT_REF_NAME
    - 'echo -e "${TXT_YELLOW}RELEASE                  : $RELEASE"'
    - 'echo -e "${TXT_YELLOW}DATABASE                 : $DATABASE"'
    - 'echo -e "${TXT_YELLOW}CATEGORY                 : $CATEGORY"'
    - 'echo -e "${TXT_YELLOW}RDF_INPUT_FILES          : $RDF_INPUT_FILES"'
    - 'echo -e "${TXT_YELLOW}RDF_ASKOMICS_INPUT_FILE  : $RDF_ASKOMICS_INPUT_FILE"'
    - 'echo -e "${TXT_YELLOW}PROV_FILE_NAME           : $PROV_FILE_NAME"'
    - 'echo -e "${TXT_YELLOW}OUTPUT_SCRIPT_FILE       : $OUTPUT_SCRIPT_FILE"'
    - 'echo -e "${TXT_YELLOW}CI_PROJECT_NAME          : $CI_PROJECT_NAME"'
    - 'echo -e "${TXT_YELLOW}START_DATETIME_XSD       : ${START_DATETIME_XSD}"'
    - 'echo -e "${TXT_YELLOW}SSH_HOST_WORK_DIR        : ${SSH_HOST_WORK_DIR}"'
    - 'echo -e "${TXT_YELLOW}CI_JOB_ID                : ${CI_JOB_ID}"'
    - 'echo -e "${TXT_YELLOW}####################################################"'
    - 'echo -e "${TXT_YELLOW}###       Metadata / Push on HDFS script Generation"'
    - 'echo -e "${TXT_YELLOW}####################################################"'
    - |
      if [ -z "$RDF_ASKOMICS_INPUT_FILE" ];then
         service-rdf-database-deployment --soft ${CI_PROJECT_NAME} \
                           --start-date ${START_DATETIME_XSD} \
                           --category ${CATEGORY}  \
                           --release ${RELEASE}  \
                           --database ${DATABASE}  \
                           --output ${OUTPUT_SCRIPT_FILE} \
                           --provjsonld ${PROV_FILE_NAME} \
                           ${RDF_INPUT_FILES}
      else
         service-rdf-database-deployment --soft ${CI_PROJECT_NAME} \
                  --start-date ${START_DATETIME_XSD} \
                  --category ${CATEGORY}  \
                  --release ${RELEASE}  \
                  --database ${DATABASE}  \
                  --askomics-abstraction ${RDF_ASKOMICS_INPUT_FILE} \
                  --provjsonld ${PROV_FILE_NAME} \
                  --output ${OUTPUT_SCRIPT_FILE} \
                  ${RDF_INPUT_FILES}
      fi
    - 'echo -e "${TXT_YELLOW}####################################################"'
    - 'echo -e "${TXT_YELLOW}### Copy script => ${SSH_HOST_WORK_DIR}/${CI_JOB_ID}"'
    - 'echo -e "${TXT_YELLOW}####################################################"'
    - ssh $SSH_OPTS $SSH_USER@$SSH_HOST "mkdir -p ${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/"
    - RDF_LOCAL_FILES=$(echo $RDF_INPUT_FILES | tr ' ' '\n' | awk '!/^(http|https|ftp)/ {print $1}' | tr '\n' ' ')
    - |
      if [ -n "$RDF_LOCAL_FILES" ];then
        scp -r ${RDF_LOCAL_FILES} $SSH_USER@$SSH_HOST:${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/
      fi
    - |
      if [ -n "$RDF_ASKOMICS_INPUT_FILES" ];then
        RDF_ASKOMICS_LOCAL_FILES=$(echo $RDF_ASKOMICS_INPUT_FILES | tr ' ' '\n' | awk '!/^(http|https|ftp)/ {print $1}' | tr '\n' ' ')
        if [ -n "$RDF_ASKOMICS_LOCAL_FILES" ]; then
          scp -r ${RDF_ASKOMICS_INPUT_FILES} $SSH_USER@$SSH_HOST:${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/
        fi
      fi
    - scp ${OUTPUT_SCRIPT_FILE} $SSH_USER@$SSH_HOST:${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/
    - 'echo -e "${TXT_YELLOW}####################################################"'
    - 'echo -e "${TXT_YELLOW}###    HDFS Deployment (Data + Metadata)"'
    - 'echo -e "${TXT_YELLOW}####################################################"'
    - ssh $SSH_OPTS $SSH_USER@$SSH_HOST "cd ${SSH_HOST_WORK_DIR}/${CI_JOB_ID};bash ${OUTPUT_SCRIPT_FILE}"
    - 'echo -e "${TXT_YELLOW}####################################################"'
    - 'echo -e "${TXT_YELLOW}###    Clean"'
    - 'echo -e "${TXT_YELLOW}####################################################"'
    - ssh $SSH_OPTS $SSH_USER@$SSH_HOST "rm -rf ${SSH_HOST_WORK_DIR}/${CI_JOB_ID}/"

stop_review:
  stage: deploy
  extends: .common_deploy
  except:
    - branches
  script:
    - RELEASE=$CI_COMMIT_TAG
    - '[ -z "$DATABASE" ] && echo "DATABASE is Empty" && exit 1'
    - '[ -z "$CATEGORY" ] && echo "CATEGORY is Empty" && exit 1'
    - '[ -z "$RELEASE" ] && echo "RELEASE is Empty" && exit 1'
    - 'export HDFS="/usr/local/hadoop/bin/hdfs"'
    -  '[ ! -z "$RDF_ASKOMICS_INPUT_FILES" ] && ssh $SSH_OPTS $SSH_USER@$SSH_HOST "$HDFS dfs -rm -f /rdf/askomics/$RDF_ASKOMICS_INPUT_FILES"'
    - 'ssh $SSH_OPTS $SSH_USER@$SSH_HOST "$HDFS dfs -rm -f /rdf/prov/${PROV_FILE_NAME}"'
    - 'ssh $SSH_OPTS $SSH_USER@$SSH_HOST "$HDFS dfs -rm -r -f /rdf/${CATEGORY}/${DATABASE}/${RELEASE}"'
    # --- Remove tag Version ---
    - | 
      curl -s --request DELETE \
      --header "PRIVATE-TOKEN: ${PRIVATE_TOKEN}"\
        "${CI_SERVER_URL}/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name=${VERSION}

  when: manual
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
