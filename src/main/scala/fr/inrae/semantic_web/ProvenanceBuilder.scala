package fr.inrae.semantic_web

import org.eclipse.rdf4j.model.util.ModelBuilder
import org.eclipse.rdf4j.model.util.Values.literal
import org.eclipse.rdf4j.model.vocabulary.{PROV, RDF, XSD}
import org.eclipse.rdf4j.rio.{RDFFormat, Rio, WriterConfig}

import java.io.StringWriter
import java.util.Date

case object ProvenanceBuilder {
  val mapPrefix = Map(
    "rdfs"          -> "http://www.w3.org/2000/01/rdf-schema#",
    "rdf"           -> "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "xsd"           -> "http://www.w3.org/2000/10/XMLSchema#",
    "owl"           -> "http://www.w3.org/2002/07/owl#",
    "prov"          -> "http://www.w3.org/ns/prov#",
    ""              -> "http://www.metabohub.fr/msd#"
    )

  val builder : ModelBuilder = new ModelBuilder()

  mapPrefix map { case (k,v) => {
    builder.setNamespace(k,v)
  }}

  def build(
             ciProjectUrl:String,
             ciPipelineUrl:String,
             urlRelease:String,
             category : String,
             database : String,
             release : String,
             soft : String,
             startDate:String,
             extension : String
           ) : String = {

    val graphNamed : String = "http://www.metabohub.fr/msd/prov/" +
      category + "/" +
      database + "/" +
      release + "/"
    /*
      Category is a Prov:Entity
     */
    builder
      .namedGraph(graphNamed)
      .subject((":"+s"$category"))
      .add(RDF.TYPE, PROV.ENTITY)
    /*
      Database is a Prov:Entity associated with Category
     */
    builder
      .namedGraph(graphNamed)
      .subject(":"+s"$database")
      .add(PROV.WAS_ASSOCIATED_WITH, (s":$category"))
      .add(RDF.TYPE, PROV.ENTITY)

    builder
      .namedGraph(graphNamed)
      .subject(s"$ciProjectUrl")
      .add(RDF.TYPE, PROV.ENTITY)


    /*
      Release is a Prov:Entity
      This release is generated by the gitlab origin CI/CD project
    */
    val newBase : String = s"$urlRelease"
    val currentActivitySoft : String = s"$ciPipelineUrl"

    builder
      .namedGraph(graphNamed)
      .subject(newBase)
      .add(RDF.TYPE, PROV.ENTITY)
      .add(PROV.WAS_GENERATED_BY, s"$currentActivitySoft")

    val endString : String = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new Date())

    builder
      .namedGraph(graphNamed)
      .subject(currentActivitySoft)
      .add(RDF.TYPE, PROV.ACTIVITY)
      .add(PROV.USED,s"$ciProjectUrl")
      .add(PROV.STARTED_AT_TIME,literal(startDate,XSD.DATETIME))
      .add(PROV.ENDED_AT_TIME,literal(endString,XSD.DATETIME))


    val config : WriterConfig = new WriterConfig()
   // config.set(BasicWriterSettings.PRETTY_PRINT, true)

    val stringWriter = new StringWriter()

    val format : RDFFormat = extension match {
      case "jsonld" => RDFFormat.JSONLD
      case "ttl"    => RDFFormat.TURTLE
      case "trig"   => RDFFormat.TRIG
      case "nt"     => RDFFormat.NTRIPLES
      case "n3"     => RDFFormat.N3
      case "rdf"    => RDFFormat.RDFXML
      case _ => throw new IllegalArgumentException(s"Unknown extension : $extension ")
    }

    Rio.write(builder.build(), stringWriter, format, config)

    stringWriter.toString()
  }
}
